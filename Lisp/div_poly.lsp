(defun div_poly_v1 (R V Q)
	(setf n (degree V))
	(setf m (degree R))
	(setf lcv (leading_coeff V))
	(setf lcr (leading_coeff R))
	(setf s (/ lcr lcv))
	(setf A (substraction R (create_mono lcr m)))
	(setf B (substraction V (create_mono lcv n)))
	(setf C (mul_poly B (create_mono s (- m n) ) ))
	(setf R1 (reduc_poly(substraction A C)))
	(setf Q1 (addition Q (create_mono s (- m n) ) ) )
	(if (< (degree R) (degree V))
		(return-from div_poly_v1 (list Q R))
		(return-from div_poly_v1 ( div_poly_v1 R1 V Q1))
	)
)

(defun div_poly (U V)
	(div_poly_v1 U V '(0))
)
